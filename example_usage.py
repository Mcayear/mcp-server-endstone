#!/usr/bin/env python3
"""
Endstone MCP Server Usage Examples

This script demonstrates how to interact with the Endstone MCP Server
using the MCP client library.
"""

import asyncio
import json
from mcp.client.session import ClientSession
from mcp.client.stdio import stdio_client

async def example_usage():
    """Demonstrate various MCP server features."""
    
    # This is a conceptual example - actual client implementation may vary
    print("=== Endstone MCP Server Usage Examples ===")
    
    # Example 1: Get module information
    print("\n1. Getting module information:")
    print("Tool: get_module_info")
    print("Parameters: {'module_name': 'endstone.event'}")
    print("Expected: List of all event classes and their descriptions")
    
    # Example 2: Search for exports
    print("\n2. Searching for exports:")
    print("Tool: search_exports")
    print("Parameters: {'query': 'Player'}")
    print("Expected: All Player-related classes across modules")
    
    # Example 3: Generate plugin template
    print("\n3. Generating plugin template:")
    print("Tool: generate_plugin_template")
    print("Parameters: {'plugin_name': 'MyPlugin', 'features': ['events', 'commands']}")
    print("Expected: Complete plugin template with event handlers and command setup")
    
    # Example 4: Get event information
    print("\n4. Getting event information:")
    print("Tool: get_event_info")
    print("Parameters: {'event_type': 'PlayerJoinEvent'}")
    print("Expected: Detailed info about PlayerJoinEvent and usage examples")
    
    # Example 5: Using prompts
    print("\n5. Using development guides:")
    print("Prompt: plugin_development")
    print("Expected: Comprehensive plugin development guide")
    
    print("\n=== Sample Plugin Generated by MCP Server ===")
    
    sample_plugin = '''
from endstone.plugin import Plugin
from endstone import Logger
from endstone.event import event_handler, PlayerJoinEvent, PlayerQuitEvent
from endstone.command import Command, CommandExecutor

class ExamplePlugin(Plugin):
    name = "ExamplePlugin"
    version = "1.0.0"
    api_version = "0.5"
    description = "An example plugin generated by Endstone MCP Server"
    
    def __init__(self):
        super().__init__()
        self.logger: Logger = self.get_logger()
        self.player_count = 0
    
    def on_enable(self) -> None:
        """Called when the plugin is enabled."""
        self.logger.info(f"{self.name} v{self.version} has been enabled!")
        self.register_events()
        self.register_commands()
    
    def register_events(self):
        """Register event handlers."""
        
        @event_handler
        def on_player_join(self, event: PlayerJoinEvent):
            player = event.player
            self.player_count += 1
            self.logger.info(f"Player {player.name} joined! Total players: {self.player_count}")
            player.send_message(f"Welcome {player.name}! You are player #{self.player_count}")
        
        @event_handler
        def on_player_quit(self, event: PlayerQuitEvent):
            player = event.player
            self.player_count = max(0, self.player_count - 1)
            self.logger.info(f"Player {player.name} left! Remaining players: {self.player_count}")
    
    def register_commands(self):
        """Register custom commands."""
        
        class InfoCommandExecutor(CommandExecutor):
            def __init__(self, plugin):
                self.plugin = plugin
            
            def on_command(self, sender, command, args):
                sender.send_message(f"Server Info:")
                sender.send_message(f"- Plugin: {self.plugin.name} v{self.plugin.version}")
                sender.send_message(f"- Online Players: {self.plugin.player_count}")
                return True
        
        # Register the info command
        info_command = Command("serverinfo")
        info_command.description = "Show server information"
        info_command.executor = InfoCommandExecutor(self)
        self.server.command_map.register(info_command)
    
    def on_disable(self) -> None:
        """Called when the plugin is disabled."""
        self.logger.info(f"{self.name} has been disabled!")
'''
    
    print(sample_plugin)
    
    print("\n=== MCP Server Integration Tips ===")
    print("""
1. **IDE Integration**: Configure your IDE to use this MCP server for Endstone development
2. **Code Completion**: Use the search_exports tool to find available classes and functions
3. **Template Generation**: Quickly scaffold new plugins with the generate_plugin_template tool
4. **Documentation**: Access built-in guides through prompts for learning
5. **Event Discovery**: Use get_event_info to explore available events and their usage

To integrate with Claude Desktop or other MCP clients, add this server to your configuration:

```json
{
  "mcpServers": {
    "endstone": {
      "command": "python",
      "args": ["C:/Users/Administrator/Desktop/endstone mcp/endstone_mcp_server.py"]
    }
  }
}
```

Then you can ask questions like:
- "Show me all Player-related classes in Endstone"
- "Generate a plugin that handles player join events"
- "What events are available for block interactions?"
- "How do I create a custom command?"
    """)

if __name__ == "__main__":
    asyncio.run(example_usage())